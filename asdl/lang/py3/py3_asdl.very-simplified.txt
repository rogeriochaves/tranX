## ASDL's six builtin types are
identifier, int, string, bytes, object, singleton


mod = Expression(expr body)

stmt = FunctionDef(identifier name, arguments args, stmt* body, expr* decorator_list, expr? returns)
      | Return(expr? value)

      | Assign(expr* targets, expr value)
      | AugAssign(expr target, operator op, expr value)

      | For(expr target, expr iter, stmt* body, stmt* orelse)
      | While(expr test, stmt* body, stmt* orelse)
      | If(expr test, stmt* body, stmt* orelse)

      | Expr(expr value)
      | Pass
      | Break
      | Continue


expr = BoolOp(boolop op, expr* values)
     | BinOp(expr left, operator op, expr right)
     | UnaryOp(unaryop op, expr operand)
     | Lambda(arguments args, expr body)
     | IfExp(expr test, expr body, expr orelse)
     | Dict(expr* keys, expr* values)
     | Compare(expr left, cmpop* ops, expr* comparators)
     | Call(expr func, expr* args, keyword* keywords)
     ## a number as a PyObject.
     | Num(object n)
     ## need to specify raw, unicode, etc?
     | Str(string s)
     | NameConstant(singleton value)

     ## the following expression can appear in assignment context
     | Attribute(expr value, identifier attr)
     | Subscript(expr value, slice slice)
     | Name(identifier id)
     | List(expr* elts)

slice = Slice(expr? lower, expr? upper, expr? step)
      | ExtSlice(slice* dims)
      | Index(expr value)

boolop = And | Or

operator = Add | Sub | Mult | MatMult | Div | Mod | Pow | LShift
             | RShift | BitOr | BitXor | BitAnd | FloorDiv

unaryop = Invert | Not | UAdd | USub

cmpop = Eq | NotEq | Lt | LtE | Gt | GtE | Is | IsNot | In | NotIn

arguments = arguments(arg* args, arg? vararg, arg* kwonlyargs, expr* kw_defaults, arg? kwarg, expr* defaults)

arg = arg(identifier arg, expr? annotation)

keyword = keyword(identifier? arg, expr value)
